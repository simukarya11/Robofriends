{"version":3,"sources":["serviceWorker.js","components/robots.js","components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","robots","id","name","username","email","Card","props","className","alt","src","CardList","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","searchfield","target","value","state","filteredRobots","this","filter","toLowerCase","includes","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCClBOC,EAAS,CACpB,CACEC,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2BC1CIC,EAfJ,SAACC,GACX,IACOJ,EAAeI,EAAfJ,KAAKE,EAAUE,EAAVF,MAAMH,EAAIK,EAAJL,GAClB,OACE,yBAAKM,UAAU,uDACd,yBAAKC,IAAI,SAAUC,IAAG,+BAA0BR,EAA1B,cACtB,6BACC,4BAAKC,GACL,2BAAIE,MCaMM,EAnBA,SAAC,GACf,IADgBV,EACjB,EADiBA,OAGhB,OACE,6BAEKA,EAAOW,KAAI,SAACC,EAAKC,GACd,OAAO,kBAAC,EAAD,CAAMC,IAAKd,EAAOa,GAAGZ,GAClBA,GAAID,EAAOa,GAAGZ,GACdC,KAAMF,EAAOa,GAAGX,KAChBE,MAAOJ,EAAOa,GAAGT,aCMvBW,EAlBC,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAEjB,OACE,yBAAKT,UAAU,QACf,2BAAOA,UAAU,iCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,MC6BLI,E,kDA/Bd,aACC,IAAD,8BACC,gBAODC,eAAiB,SAACC,GAEjB,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SARxC,EAAKC,MAAM,CACV3B,OAAOA,EACPwB,YAAY,IAJd,E,qDAcS,IAAD,OAEFI,EAAeC,KAAKF,MAAM3B,OAAO8B,QAAO,SAAA9B,GAC5C,OAAOA,EAAOE,KAAK6B,cAAcC,SAAS,EAAKL,MAAMH,YAAYO,kBAGhE,OACE,yBAAKxB,UAAU,MACd,4CACA,kBAAC,EAAD,CAAWS,aAAca,KAAKR,iBAC9B,kBAAC,EAAD,CAAUrB,OAAQ4B,S,GA3BPK,aCMlBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SNoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.1b62de64.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\n\nconst Card=(props)=>\n{\n\tconst {name,email,id}=props;\n\treturn(\n\t\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t\t<img alt='robots'  src={`https://robohash.org/${id}?200x200`} />\n\t\t\t\t<div>\n\t\t\t\t\t<h2>{name}</h2>\n\t\t\t\t\t<p>{email}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card.js';\n\n\nconst CardList=({robots})=>\n{\n\t/*This part runs a loop over all the components*/\n\treturn(\n\t\t\t<div>\n\t\t\t    {\n\t\t\t    \trobots.map((user,i)=>{\n\t\t\t\t\t\t\t\t\t\t\treturn(<Card key={robots[i].id} \n\t\t\t\t\t\t\t\t\t\t\t\t         id={robots[i].id} \n\t\t\t\t\t\t\t\t\t\t\t\t         name={robots[i].name} \n\t\t\t\t\t\t\t\t\t\t\t\t         email={robots[i].email}/>);\n\t\t\t\t\t\t\t\t\t      })\n\n\t\t\t    }\n\t\t\t</div>\n\t\t  );\n\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox=({searchChange}) =>{\n\n\treturn(\n\t\t\t<div className=' pa2'>\n\t\t\t<input className=' pa3 b--green bg-lightest-blue' \n\t\t\t       type='search' \n\t\t\t       placeholder='Search-Robots' \n\t\t\t       onChange={searchChange}\n\t\t\t />\n\t\t\t</div>\n\t\t  );\n\n}\n\n\n\n\n\nexport default SearchBox;","import React,{Component} from 'react';\nimport {robots} from '../components/robots.js';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\n\nclass App extends Component  {\n\n\tconstructor()\n\t{\n\t\tsuper();\n\t\tthis.state={\n\t\t\trobots:robots,\n\t\t\tsearchfield:''\n\t\t}\n\t}\n\t/*+++++++++++++++++++++++++++++++++++++++++++*/\n\tonSearchChange = (event) =>\n\t{\n\t\tthis.setState({searchfield:event.target.value})\n\t}\n\n\t/*+++++++++++++++++++++++++++++++++++++++++++*/\n\trender(){\n\t\t/*below is the querry usewd to filter the data received by App from SearchBox*/\n\tconst filteredRobots=this.state.robots.filter(robots=>{\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\n\t})\n\t\t\t\treturn(\n\t\t\t\t\t\t<div className='tc'>\n\t\t\t\t\t\t\t<h1 >Robo Friends</h1>\n\t\t\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\n\t\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t  );\n\t\t\t}\t\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n//import {robots} from './robots.js';\n//import CardList from './CardList';\n\nimport App from './containers/App.js';\n\nReactDOM.render(\n  <React.StrictMode>\n\t\t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to<h1>hello World</h1> work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}